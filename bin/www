#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('schedule-maker:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




// ================================websockets============================
const WebSocket = require('ws');

const wss = new WebSocket.Server({
  server,          // piggybacking on the plain http server
  path: '/message'    // listen on only one route, allowing express to listen on its custom routes
});

const msgs = [
  {"to":"ben", "from":"armond", "timestamp": "11:31am", "message":"lol cats"},
  {"to":"armond", "from":"ben", "timestamp": "11:32am", "message":"be well soon"},
];

wss.on('connection', (socket) => {
  console.log('oh boy! a new connection!');
  // socket.send(JSON.stringify(db));

  socket.on('message', (data) => {
      const parsed = JSON.parse(data)
      console.log(parsed);
      msgs.push(parsed);

      console.log(msgs);
      wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify(data));
          }
      });
      // socket.send(data);
  });
});

